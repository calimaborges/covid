{"version":3,"sources":["App.js","parseCsv.js","index.js"],"names":["dataConfig","dataKey","name","stroke","App","data","dataGroupedBySigla","groupBy","dataGroupedByData","console","log","key","reduce","soma","curr","sigla","regiao","date","casosNovos","casosAcumulados","obitosNovos","obitosAcumulados","Object","values","BRASIL","estados","React","useState","estado","setEstado","FilterButton","onClick","style","border","padding","fontSize","margin","fontFamily","backgroundColor","color","outline","display","flexDirection","alignItems","keys","sort","map","width","height","slice","strokeDasharray","type","lineProps","strokeWidth","href","target","rel","parseCsv","url","Promise","resolve","Papa","parse","dynamicTyping","download","complete","header","keepEmptyRows","skipEmptyLines","transformHeader","test","kCsvUrl","a","csv","ReactDOM","render","StrictMode","document","getElementById","main"],"mappings":"uPAaMA,EAAa,CACjB,CAAEC,QAAS,kBAAmBC,KAAM,mBAAoBC,OAAQ,WAChE,CAAEF,QAAS,aAAcC,KAAM,cAAeC,OAAQ,WACtD,CAAEF,QAAS,mBAAoBC,KAAM,uBAAqBC,OAAQ,WAClE,CAAEF,QAAS,cAAeC,KAAM,kBAAgBC,OAAQ,YAiG3CC,MA9Ff,YAAwB,IAATC,EAAQ,EAARA,KACPC,EAAqBC,IAAQF,EAAM,SACnCG,EAAoBD,IAAQF,EAAM,QACxCI,QAAQC,IAAIL,GAHS,eAKZM,GACPH,EAAkBG,GAAOH,EAAkBG,GAAKC,QAAO,SAACC,EAAMC,GAC5D,MAAO,CACLC,MAAO,SACPC,OAAQ,SACRC,KAAMN,EACNO,YAAaL,EAAKK,YAAc,GAAKJ,EAAKI,WAC1CC,iBAAkBN,EAAKM,iBAAmB,GAAKL,EAAKK,gBACpDC,aAAcP,EAAKO,aAAe,GAAKN,EAAKM,YAC5CC,kBAAmBR,EAAKQ,kBAAoB,GAAKP,EAAKO,sBAT5D,IAAK,IAAIV,KAAOH,EAAoB,EAA3BG,GAcTL,EAAkB,OAAagB,OAAOC,OAAOf,GAEdF,EAAvBkB,OArBa,IAqBFC,EArBE,YAqBUnB,EArBV,cAuBOoB,IAAMC,SAAS,UAvBtB,mBAuBdC,EAvBc,KAuBNC,EAvBM,KAyBrB,SAASC,EAAT,GAAkC,IAAVf,EAAS,EAATA,MACtB,OACE,4BACEgB,QAAS,kBAAMF,EAAUd,IACzBiB,MAAO,CACLC,OAAQ,kBACRC,QAAS,SACTC,SAAU,SACVC,OAAQ,SACRC,WAAY,YACZC,gBAAiBvB,IAAUa,EAAS,QAAU,QAC9CW,MAAOxB,IAAUa,EAAS,QAAU,QACpCY,QAAS,SAGVzB,GAKP,OACE,yBACEiB,MAAO,CACLI,OAAQ,OACRK,QAAS,OACTC,cAAe,SACfC,WAAY,WAGd,6BACE,kBAACb,EAAD,CAAcf,MAAM,WACnBO,OAAOsB,KAAKnB,GACVoB,OACAC,KAAI,SAAC/B,GAAD,OACH,kBAACe,EAAD,CAAcnB,IAAKI,EAAOA,MAAOA,QAGvC,mDAAyBa,GACzB,kBAAC,IAAD,CAAqBmB,MAAM,MAAMC,OAAQ,KACvC,kBAAC,IAAD,CAAW3C,KAAMC,EAAmBsB,GAAQqB,MAAM,KAChD,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAOjD,QAAQ,SACf,kBAAC,IAAD,CAAOkD,KAAK,WACXnD,EAAW8C,KAAI,SAACM,GAAD,OACd,kBAAC,IAAD,eACEzC,IAAKyC,EAAUnD,QACfkD,KAAK,WACLE,YAAa,GACTD,OAEJ,MAGR,+CACoB,IAClB,uBACEE,KAAK,8BACLC,OAAO,SACPC,IAAI,uBAHN,kC,kBCpGO,SAASC,EAASC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,GAClBC,IAAKC,MAAMJ,EAAK,CACdK,eAAe,EACfC,UAAU,EACVC,SAAUL,EACVM,QAAQ,EACRC,eAAe,EACfC,gBAAgB,EAChBC,gBAAiB,SAAUH,GACzB,MAAI,SAASI,KAAKJ,GACT,SAEAA,QCVjB,IAAMK,EACJ,kJ,4CAEF,4BAAAC,EAAA,sEACoBf,EAASc,GAD7B,OACQE,EADR,OAGEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKvE,KAAMoE,EAAIpE,QAEjBwE,SAASC,eAAe,SAP5B,4C,0DAWAC,K","file":"static/js/main.e5764f4c.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport groupBy from \"lodash.groupby\";\n\nconst dataConfig = [\n  { dataKey: \"casosAcumulados\", name: \"Casos Acumulados\", stroke: \"#387002\" },\n  { dataKey: \"casosNovos\", name: \"Casos Novos\", stroke: \"#99d066\" },\n  { dataKey: \"obitosAcumulados\", name: \"Óbitos Acumulados\", stroke: \"#9a0007\" },\n  { dataKey: \"obitosNovos\", name: \"Óbitos Novos\", stroke: \"#ff6659\" },\n];\n\nfunction App({ data }) {\n  const dataGroupedBySigla = groupBy(data, \"sigla\");\n  const dataGroupedByData = groupBy(data, \"date\");\n  console.log(data);\n\n  for (let key in dataGroupedByData) {\n    dataGroupedByData[key] = dataGroupedByData[key].reduce((soma, curr) => {\n      return {\n        sigla: \"BRASIL\",\n        regiao: \"BRASIL\",\n        date: key,\n        casosNovos: (soma.casosNovos || 0) + curr.casosNovos,\n        casosAcumulados: (soma.casosAcumulados || 0) + curr.casosAcumulados,\n        obitosNovos: (soma.obitosNovos || 0) + curr.obitosNovos,\n        obitosAcumulados: (soma.obitosAcumulados || 0) + curr.obitosAcumulados,\n      };\n    });\n  }\n\n  dataGroupedBySigla[\"BRASIL\"] = Object.values(dataGroupedByData);\n\n  const { BRASIL, ...estados } = dataGroupedBySigla;\n\n  const [estado, setEstado] = React.useState(\"BRASIL\");\n\n  function FilterButton({ sigla }) {\n    return (\n      <button\n        onClick={() => setEstado(sigla)}\n        style={{\n          border: \"1px solid black\",\n          padding: \"0.2rem\",\n          fontSize: \"1.2rem\",\n          margin: \"0.1rem\",\n          fontFamily: \"monospace\",\n          backgroundColor: sigla === estado ? \"black\" : \"white\",\n          color: sigla === estado ? \"white\" : \"black\",\n          outline: \"none\",\n        }}\n      >\n        {sigla}\n      </button>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        margin: \"5rem\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n      }}\n    >\n      <div>\n        <FilterButton sigla=\"BRASIL\" />\n        {Object.keys(estados)\n          .sort()\n          .map((sigla) => (\n            <FilterButton key={sigla} sigla={sigla} />\n          ))}\n      </div>\n      <h1>Exibindo dados para {estado}</h1>\n      <ResponsiveContainer width=\"95%\" height={400}>\n        <LineChart data={dataGroupedBySigla[estado].slice(26)}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Legend />\n          <XAxis dataKey=\"date\" />\n          <YAxis type=\"number\" />\n          {dataConfig.map((lineProps) => (\n            <Line\n              key={lineProps.dataKey}\n              type=\"monotone\"\n              strokeWidth={2}\n              {...lineProps}\n            />\n          ))}{\" \"}\n        </LineChart>\n      </ResponsiveContainer>\n      <p>\n        Dados baixados de{\" \"}\n        <a\n          href=\"https://covid.saude.gov.br/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://covid.saude.gov.br/\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import Papa from \"papaparse\";\n\nexport default function parseCsv(url) {\n  return new Promise((resolve) => {\n    Papa.parse(url, {\n      dynamicTyping: true,\n      download: true,\n      complete: resolve,\n      header: true,\n      keepEmptyRows: false,\n      skipEmptyLines: true,\n      transformHeader: function (header) {\n        if (/regi.o/.test(header)) {\n          return \"regiao\";\n        } else {\n          return header;\n        }\n      },\n    });\n  });\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport parseCsv from \"./parseCsv\";\n\nconst kCsvUrl =\n  \"https://mobileapps.saude.gov.br/esus-vepi/files/unAFkcaNDeXajurGB7LChj8SgQYS2ptm/b350824dbfad17f083e62d4b41e88cb7_Download_COVID19_20200408.csv\";\n\nasync function main() {\n  const csv = await parseCsv(kCsvUrl);\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <App data={csv.data} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n\nmain();\n"],"sourceRoot":""}